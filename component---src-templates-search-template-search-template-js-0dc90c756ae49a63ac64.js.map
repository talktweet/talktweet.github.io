{"version":3,"sources":["webpack:///./src/templates/search-template/search-template.stc.js","webpack:///./src/templates/search-template/search-template.js","webpack:///./src/containers/widgets/cta/cta.stc.js","webpack:///./src/containers/widgets/cta/index.js","webpack:///./src/components/blog/layout-two/blog.stc.js","webpack:///./src/components/blog/layout-two/index.js","webpack:///./src/components/forms/mailchimp-two/form/mailchimp.stc.js","webpack:///./src/components/forms/mailchimp-two/form/index.js","webpack:///./src/components/forms/mailchimp-two/index.js","webpack:///./src/containers/widgets/subscribe/subscribe.stc.js","webpack:///./src/containers/widgets/subscribe/index.js"],"names":["SectionWrap","styled","section","device","small","medium","PageHeader","div","BlogListWrap","SidebarWrap","aside","WidgetBoxWrap","SearchTemplate","data","location","pageContext","restProps","blogs","allMarkdownRemark","edges","headingCSS","textCSS","blogStyle","state","query","filteredBlogs","filter","post","node","frontmatter","title","quote_text","quote_author","category","tags","authorName","author","name","html","toLowerCase","includes","join","className","Container","Row","Col","xl","length","map","blog","key","fields","slug","content","excerpt","defaultProps","mb","mt","as","color","CtaWrap","CtaBG","BackgroundImage","CtaContent","themeGet","CTA","ctaHeading","ctaBtn","ctadataquery","useStaticQuery","bgImage","file","childImageSharp","fluid","cta","parse","path","to","icon","fontSize","lineHeight","letterSpacing","fontWeight","colors","shape","pl","pr","BlogWrapper","article","space","BlogInner","BlogMedia","large","BlogContent","BlogHeader","header","BlogTitle","h3","BlogMetaWrap","BlogExcerpt","p","BlogFooter","footer","Blog","video_id","video_channel","dateSlug","date","format","image","postID","video_link","link","images","btnStyle","categoryStyle","restStyles","split","useState","videoOpen","setVideoOpen","onClick","poster","text","slugify","id","channel","videoId","isOpen","onClose","varient","MailchimpWrap","SubmitBtn","MailchimpInner","Mailchimp","email","status","message","onValidated","error","setError","ref","type","placeholder","isValidate","test","validateEmail","value","indexOf","EMAIL","style","dangerouslySetInnerHTML","__html","url","site","siteMetadata","mailchimp_endpoint","render","subscribe","formData","FormWrapper","SubscribeText","SearchWidget","widgetStyle","widgetTitleStyle","inputStyle","skin"],"mappings":"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","file":"component---src-templates-search-template-search-template-js-0dc90c756ae49a63ac64.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { WidgetBoxWrap } from '../../components/shared/widget-box/widget-box.stc'\r\nimport { device } from '../../theme'\r\n\r\nexport const SectionWrap = styled.section`\r\n    padding-top: 55px;\r\n    padding-bottom: 60px;\r\n    ${device.small}{\r\n        padding-top: 75px;\r\n        padding-bottom: 80px;\r\n    }\r\n    ${device.medium}{\r\n        padding-top: 95px;\r\n        padding-bottom: 100px;\r\n    }\r\n`;\r\n\r\nexport const PageHeader = styled.div`\r\n    margin-bottom: 36px;\r\n`;\r\n\r\nexport const BlogListWrap = styled.div``;\r\n\r\nexport const SidebarWrap = styled.aside`\r\n    ${WidgetBoxWrap}{\r\n        &:not(:last-child){\r\n            margin-bottom: 30px;\r\n        }\r\n    }\r\n`;","import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport SEO from \"../../components/seo\"\r\nimport Layout from \"../../containers/layout/layout\"\r\nimport Header from '../../containers/layout/header'\r\nimport Footer from '../../containers/layout/footer'\r\nimport Text from '../../components/shared/text'\r\nimport Heading from '../../components/shared/heading'\r\nimport Blog from '../../components/blog/layout-two'\r\nimport SearchWidget from '../../containers/widgets/search'\r\nimport RecentPostWidget from '../../containers/widgets/recent-post'\r\nimport CategoryWidget from '../../containers/widgets/categories'\r\nimport CTAWidget from '../../containers/widgets/cta'\r\nimport SubscribeWidget from '../../containers/widgets/subscribe'\r\nimport { SectionWrap, PageHeader, BlogListWrap, SidebarWrap } from './search-template.stc'\r\n\r\nconst SearchTemplate = ({ data, pageContext, location, ...restProps }) => {\r\n    const blogs = data.allMarkdownRemark.edges || [];\r\n    const { headingCSS, textCSS, blogStyle } = restProps\r\n    const { state } = location;\r\n    const query = state && state.query\r\n    let filteredBlogs = [];\r\n    filteredBlogs = query && blogs.filter(post => {\r\n        const { title, quote_text, quote_author, category, tags, author: { name: authorName } } = post.node.frontmatter\r\n        const { html } = post.node\r\n        return (\r\n            (title && title.toLowerCase().includes(query)) ||\r\n            (quote_text && quote_text.toLowerCase().includes(query)) ||\r\n            (quote_author && quote_author.toLowerCase().includes(query)) ||\r\n            (html && html.toLowerCase().includes(query)) ||\r\n            (authorName && authorName.toLowerCase().includes(query)) ||\r\n            (category && category.toLowerCase().includes(query)) ||\r\n            (tags &&\r\n                tags\r\n                    .join(\"\")\r\n                    .toLowerCase()\r\n                    .includes(query.toLowerCase()))\r\n        )\r\n    })\r\n    return (\r\n        <Layout>\r\n            <SEO title={`Search For: ${query ? query : ''}`} />\r\n            <Header />\r\n            <div className=\"main-content\">\r\n                <SectionWrap>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col xl={8}>\r\n                                <PageHeader>\r\n                                    <Text {...textCSS}>Search Results for \"{query}\"</Text>\r\n                                    <Heading {...headingCSS}>Post found: {filteredBlogs ? filteredBlogs.length : 0}</Heading>\r\n                                </PageHeader>\r\n                                <BlogListWrap>\r\n                                    {filteredBlogs && filteredBlogs.map(blog => (\r\n                                        <Blog\r\n                                            {...blogStyle}\r\n                                            key={blog.node.fields.slug}\r\n                                            content={{\r\n                                                ...blog.node.fields,\r\n                                                ...blog.node.frontmatter,\r\n                                                excerpt: blog.node.excerpt\r\n                                            }}\r\n                                        />\r\n                                    ))}\r\n                                </BlogListWrap>\r\n                            </Col>\r\n                            <Col xl={4}>\r\n                                <SidebarWrap>\r\n                                    <SearchWidget />\r\n                                    <RecentPostWidget />\r\n                                    <CategoryWidget />\r\n                                    <CTAWidget />\r\n                                    <SubscribeWidget />\r\n                                </SidebarWrap>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </SectionWrap>\r\n            </div>\r\n            <Footer />\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const query = graphql`\r\n    query BlogBySearchQuery{\r\n        allMarkdownRemark(\r\n            sort: {fields: frontmatter___date, order: DESC}\r\n        ) {\r\n            edges {\r\n                node {\r\n                    fields {\r\n                        slug\r\n                        dateSlug\r\n                        postID\r\n                    }\r\n                    frontmatter {\r\n                        category\r\n                        tags\r\n                        date(formatString: \"LL\")\r\n                        format\r\n                        title\r\n                        video_link\r\n                        quote_text\r\n                        quote_author\r\n                        link\r\n                        author {\r\n                            name\r\n                        }\r\n                        image {\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 510, maxHeight: 350, quality: 100, srcSetBreakpoints: 6) {\r\n                                    ...GatsbyImageSharpFluid_withWebp\r\n                                    presentationWidth\r\n                                    presentationHeight\r\n                                }\r\n                            }\r\n                        }\r\n                        images {\r\n                            childImageSharp {\r\n                                fluid(maxWidth: 510, maxHeight: 350, quality: 100, srcSetBreakpoints: 6) {\r\n                                    ...GatsbyImageSharpFluid_withWebp\r\n                                    presentationWidth\r\n                                    presentationHeight\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    excerpt(pruneLength: 165, format: PLAIN, truncate: true)\r\n                    html\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nSearchTemplate.defaultProps = {\r\n    textCSS: {\r\n        mb: '11px',\r\n        mt: '-4px'\r\n    },\r\n    headingCSS: {\r\n        as: 'h4',\r\n        color: 'secondaryColor'\r\n    },\r\n    blogStyle: {\r\n        mb: '30px'\r\n    }\r\n}\r\n\r\nexport default SearchTemplate\r\n","import styled from \"styled-components\";\r\nimport BackgroundImage from 'gatsby-background-image'\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const CtaWrap = styled.div `\r\n    position: relative;\r\n    padding-top: 280px;\r\n    padding-left: 45px;\r\n    padding-bottom: 38px;\r\n    margin-bottom: 30px;\r\n    &:after{\r\n        position: absolute;\r\n        content: \"\";\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 1;\r\n        border-radius: 6px;\r\n        background-image: -moz-linear-gradient( 45deg, rgb(248,119,124) 0%, rgba(248,119,124,0) 100%);\r\n        background-image: -webkit-linear-gradient( 45deg, rgb(248,119,124) 0%, rgba(248,119,124,0) 100%);\r\n        background-image: -ms-linear-gradient( 45deg, rgb(248,119,124) 0%, rgba(248,119,124,0) 100%);\r\n    }\r\n`;\r\n\r\nexport const CtaBG = styled(BackgroundImage)`\r\n    position: absolute !important;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    &:before,\r\n    &:after{\r\n        border-radius: 6px;\r\n    }\r\n`;\r\nexport const CtaContent = styled.div `\r\n    position: relative;\r\n    z-index: 2;\r\n    color: #fff;\r\n    .cta-heading{\r\n        span{\r\n            display: block;\r\n            font-family: ${themeGet('fonts.marck')};\r\n            font-size: 50px;\r\n            margin-top: 13px;\r\n        }\r\n    }\r\n`;","import React from 'react'\r\nimport {useStaticQuery, graphql} from 'gatsby'\r\nimport parse from 'html-react-parser'\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport Heading from '../../../components/shared/heading'\r\nimport Button from '../../../components/shared/button'\r\nimport {CtaWrap, CtaBG, CtaContent} from './cta.stc'\r\n\r\nconst CTA = ({ctaHeading, ctaBtn}) => {\r\n    const ctadataquery = useStaticQuery(graphql `\r\n        query WidgetCtaQuery {\r\n            file(relativePath: {eq: \"images/cta-small-image.jpg\"}) {\r\n                childImageSharp {\r\n                    fluid(maxWidth: 400, maxHeight: 480, quality: 100, srcSetBreakpoints: 6) {\r\n                        ...GatsbyImageSharpFluid_withWebp\r\n                        presentationWidth\r\n                        presentationHeight\r\n                    }\r\n                }\r\n            }\r\n            cta: pageBlockJson(id: {eq: \"home-page-cta-content\"}) {\r\n                title\r\n                path\r\n            }\r\n        }\r\n    `)\r\n    const bgImage = ctadataquery.file.childImageSharp.fluid\r\n    const {cta} = ctadataquery;\r\n    return (\r\n        <CtaWrap>\r\n            <CtaBG fluid={bgImage}/>\r\n            <CtaContent>\r\n                {cta.title && <Heading {...ctaHeading} className=\"cta-heading\">{parse(cta.title)}</Heading>}\r\n                {cta.path && <Button {...ctaBtn} to={cta.path} icon={<FiChevronRight/>}>Connect With me</Button>}\r\n            </CtaContent>\r\n        </CtaWrap>\r\n    )\r\n}\r\n\r\nCTA.defaultProps = {\r\n    ctaHeading: {\r\n        as: 'h3',\r\n        color: '#fff',\r\n        fontSize: '24px',\r\n        lineHeight: 1,\r\n        letterSpacing: '3px',\r\n        fontWeight: 300,\r\n        mb: '30px'\r\n    },\r\n    ctaBtn: {\r\n        colors: \"light\",\r\n        fontWeight: 500,\r\n        shape: 'rounded',\r\n        pl: '25px',\r\n        pr: '25px'\r\n    }\r\n}\r\n\r\nexport default CTA\r\n","import styled from \"styled-components\";\r\nimport {space} from 'styled-system'\r\nimport {device} from '../../../theme'\r\n\r\nexport const BlogWrapper = styled.article `\r\n    ${space}\r\n`;\r\n\r\nexport const BlogInner = styled.div `\r\n    ${device.small}{\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n`;\r\n\r\nexport const BlogMedia = styled.div `\r\n    width: 100%;\r\n    margin-bottom: 20px;\r\n    ${device.small}{\r\n        flex-basis: 370px;\r\n        max-width: 370px;\r\n        margin-bottom: 0;\r\n    }\r\n    ${device.medium}{\r\n        flex-basis: 300px;\r\n        max-width: 300px;\r\n    }\r\n    ${device.large}{\r\n        flex-basis: 400px;\r\n        max-width: 400px;\r\n    }\r\n`;\r\n\r\nexport const BlogContent = styled.div `\r\n    align-self: center;\r\n    width: 100%;\r\n    ${device.small}{\r\n        flex-basis: calc(100% - 370px);\r\n        max-width: calc(100% - 370px);\r\n        padding-left: 30px;\r\n    }\r\n    ${device.medium}{\r\n        flex-basis: calc(100% - 300px);\r\n        max-width: calc(100% - 300px);\r\n    }\r\n    ${device.large}{\r\n        flex-basis: calc(100% - 400px);\r\n        max-width: calc(100% - 400px);\r\n    }\r\n`;\r\n\r\nexport const BlogHeader = styled.header ``;\r\n\r\nexport const BlogTitle = styled.h3 `\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    margin-bottom: 4px;\r\n    a{\r\n        color: #0e1b47;\r\n    }\r\n`;\r\n\r\nexport const BlogMetaWrap = styled.div `\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nexport const BlogExcerpt = styled.p `\r\n    margin-bottom: 18px;\r\n`;\r\n\r\nexport const BlogFooter = styled.footer ``;","import React, {Fragment, useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'gatsby'\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport Button from '../../shared/button'\r\nimport {slugify} from '../../../utils/utilFunctions'\r\nimport BlogMeta, {Category, CommentNumber} from '../../blog/blog-meta'\r\nimport ModalVideo from '../../shared/modal-video'\r\nimport {Thumbnail, Video, Quote, Linked, Gallery} from '../blog-media'\r\nimport {\r\n    BlogWrapper,\r\n    BlogInner,\r\n    BlogMedia,\r\n    BlogContent,\r\n    BlogHeader,\r\n    BlogTitle,\r\n    BlogMetaWrap,\r\n    BlogExcerpt,\r\n    BlogFooter\r\n} from './blog.stc'\r\n  \r\nconst Blog = ({content, ...restProps}) => {\r\n    const {\r\n        slug, dateSlug, category, date, format, title, image, \r\n        excerpt, postID, video_link, quote_text, quote_author,\r\n        link, images\r\n    } = content;\r\n    const {btnStyle, categoryStyle, ...restStyles} = restProps;\r\n    let video_arr, video_id, video_channel;\r\n    if(video_link){\r\n        video_arr = video_link.split('=', -1);\r\n        video_id = video_arr[1];\r\n        video_channel = video_link.split(\".\")[1];\r\n    }\r\n    const [videoOpen, setVideoOpen] = useState(false);\r\n    const modalVideoOpen = () => {\r\n        setVideoOpen(true)\r\n    }\r\n    const modalVideoClose = () => {\r\n        setVideoOpen(false)\r\n    }\r\n     \r\n    return (\r\n        <Fragment>\r\n            <BlogWrapper {...restStyles}>\r\n                <BlogInner>\r\n                    <BlogMedia>\r\n                        {(format === 'image' || format === 'standard') && (\r\n                            <Thumbnail path={`/${slug}`} image={image} title={title}/>\r\n                        )}\r\n                        {format === 'video' && (\r\n                            <Video\r\n                                onClick={modalVideoOpen}\r\n                                poster={image.childImageSharp.fluid}\r\n                                title={title}\r\n                            />\r\n                        )}\r\n                        {format === 'quote' && <Quote text={quote_text} author={quote_author}/>}\r\n                        {format === 'link' && <Linked link={link}/>}\r\n                        {format === 'gallery' && <Gallery images={images}/>}\r\n                    </BlogMedia>\r\n                    <BlogContent>\r\n                        <BlogHeader> \r\n                            {category && <Category {...categoryStyle} slug={`/category/${slugify(category)}`} text={category}/>}\r\n                            {title && <BlogTitle><Link to={`/${slug}`}>{title}</Link></BlogTitle>}\r\n                            <BlogMetaWrap>\r\n                                {date && (\r\n                                    <BlogMeta>\r\n                                        <Link to={`/date/${slugify(dateSlug)}`}>{date}</Link>\r\n                                    </BlogMeta>\r\n                                )}\r\n                                <BlogMeta>\r\n                                    <CommentNumber slug={slug} title={title} id={postID}/>\r\n                                </BlogMeta>\r\n                            </BlogMetaWrap>\r\n                        </BlogHeader>\r\n                        {excerpt && <BlogExcerpt>{excerpt}</BlogExcerpt>}\r\n                        <BlogFooter>\r\n                            <Button {...btnStyle} icon={<FiChevronRight/>} to={`/${slug}`}>Read More</Button>\r\n                        </BlogFooter>\r\n                    </BlogContent>\r\n                </BlogInner>\r\n            </BlogWrapper>\r\n            <ModalVideo\r\n                channel={video_channel}\r\n                videoId={video_id}\r\n                isOpen={videoOpen}\r\n                onClose={modalVideoClose}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nBlog.propTypes = {\r\n    btnStyle: PropTypes.object\r\n}\r\n \r\nBlog.defaultProps = {\r\n    btnStyle: {\r\n        varient: \"texted\"\r\n    },\r\n    categoryStyle: {\r\n        mb: '7px'\r\n    }\r\n}\r\n\r\nexport default Blog\r\n","import styled from 'styled-components'\r\nimport { themeGet } from '@styled-system/theme-get';\r\n\r\nexport const MailchimpWrap = styled.div `\r\n    position: relative;\r\n    input{\r\n        padding-right: 50px;\r\n        background: #fff;\r\n        color: #63696a;\r\n        border-color: ${themeGet(\"colors.themeColor\")};\r\n        height: 60px;\r\n        border-radius: 4px;\r\n        &::-webkit-input-placeholder { \r\n            color: #63696a;\r\n        }\r\n        &:-ms-input-placeholder {\r\n            color: #63696a;\r\n        }\r\n        &::placeholder {\r\n            color: #63696a;\r\n        }\r\n    }\r\n`;\r\n \r\nexport const SubmitBtn = styled.div `\r\n    position: absolute;\r\n    right: 25px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n`;\r\n\r\nexport const MailchimpInner = styled.div `\r\n    position: relative;\r\n`","import React, {useState} from 'react'\r\nimport { FiArrowRight } from \"react-icons/fi\";\r\nimport Button from '../../../shared/button'\r\nimport {MailchimpWrap, MailchimpInner, SubmitBtn} from './mailchimp.stc'\r\n\r\nconst Mailchimp = ({ status, message, onValidated }) => {\r\n    const [error, setError] = useState(false)\r\n    let email;\r\n    const submit = () => {\r\n      const isValidate = validateEmail(email.value);\r\n      setError(!isValidate)\r\n      if(isValidate){\r\n        return (\r\n          email &&\r\n          email.value.indexOf(\"@\") > -1 &&\r\n          onValidated({\r\n            EMAIL: email.value\r\n          })\r\n        )\r\n      }\r\n    }\r\n\r\n    function validateEmail(email){\r\n      return /\\S+@\\S+\\.\\S+/.test(email)\r\n    }\r\n\r\n    return (\r\n      <MailchimpWrap>\r\n        <MailchimpInner>\r\n          <input\r\n            ref={node => (email = node)}\r\n            type=\"email\"\r\n            placeholder=\"Enter Your Email\"\r\n          />\r\n          <SubmitBtn> \r\n              <Button onClick={submit} varient=\"iconButton\" color=\"#63696a\"><FiArrowRight/></Button>\r\n          </SubmitBtn>\r\n        </MailchimpInner>\r\n        {(status === \"sending\" && !error) && <div style={{ color: \"blue\" }}>sending...</div>}\r\n        {(status === \"error\" && !error) && (\r\n          <div\r\n            style={{ color: \"red\" }}\r\n            dangerouslySetInnerHTML={{ __html: message }}\r\n          />\r\n        )}\r\n        {(error && !status) && <div style={{color: 'red'}}>Please, Write a valid email</div>}\r\n        {(status === \"success\" && !error) && (\r\n          <div\r\n            style={{ color: \"green\" }}\r\n            dangerouslySetInnerHTML={{ __html: message }}\r\n          />\r\n        )}\r\n      </MailchimpWrap>\r\n    );\r\n}; \r\n\r\nexport default Mailchimp","import React, {Fragment} from 'react'\r\nimport SubscribeFrom from \"react-mailchimp-subscribe\";\r\nimport {useStaticQuery, graphql} from 'gatsby'\r\nimport MailchimpForm from './form'\r\n\r\nconst Mailchimp = () => {\r\n    const mailchimpData = useStaticQuery(graphql `\r\n        query MailchimpTwoQuery {\r\n            site {\r\n                siteMetadata {\r\n                    mailchimp_endpoint\r\n                }\r\n            }\r\n        }      \r\n    `)\r\n    const url = mailchimpData.site.siteMetadata.mailchimp_endpoint;\r\n    return (\r\n        <Fragment>\r\n            <SubscribeFrom\r\n                url={url}\r\n                render={({ subscribe, status, message }) => (\r\n                    <MailchimpForm\r\n                        status={status}\r\n                        message={message}\r\n                        onValidated={formData => subscribe(formData)}\r\n                    />\r\n            )}/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Mailchimp\r\n","import styled from 'styled-components'\r\n\r\nexport const FormWrapper = styled.div ``;\r\n\r\nexport const SubscribeText = styled.p `\r\n    color: #fff;\r\n    font-size: 14px;\r\n    margin-bottom: 26px;\r\n    margin-top: -10px;\r\n`;","import React from 'react'\r\nimport WidgetBox, {WidgetTitle} from '../../../components/shared/widget-box'\r\nimport Mailchimp from '../../../components/forms/mailchimp-two'\r\nimport {FormWrapper, SubscribeText} from './subscribe.stc'\r\n\r\nconst SearchWidget = ({widgetStyle, widgetTitleStyle, inputStyle}) => {\r\n    return (\r\n        <WidgetBox {...widgetStyle}>\r\n            <WidgetTitle {...widgetTitleStyle}>Subscribe</WidgetTitle>\r\n            <FormWrapper>\r\n                <SubscribeText>Leave your email here and stay informed about our promotions and new arrivals.</SubscribeText>\r\n                <Mailchimp/>\r\n            </FormWrapper>\r\n        </WidgetBox>\r\n    )\r\n}\r\n \r\nSearchWidget.defaultProps = {\r\n    widgetStyle: {\r\n        skin: 'primary',\r\n    },\r\n    widgetTitleStyle: {\r\n        color: '#fff'\r\n    }\r\n}\r\n \r\nexport default SearchWidget\r\n"],"sourceRoot":""}